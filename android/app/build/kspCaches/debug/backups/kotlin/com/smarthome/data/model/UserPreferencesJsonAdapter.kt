// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.smarthome.`data`.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class UserPreferencesJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<UserPreferences>() {
  private val options: JsonReader.Options = JsonReader.Options.of("dark_mode",
      "notifications_enabled", "temperature_unit", "auto_discovery")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "darkMode")

  private val temperatureUnitAdapter: JsonAdapter<TemperatureUnit> =
      moshi.adapter(TemperatureUnit::class.java, emptySet(), "temperatureUnit")

  @Volatile
  private var constructorRef: Constructor<UserPreferences>? = null

  override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("UserPreferences").append(')') }

  override fun fromJson(reader: JsonReader): UserPreferences {
    var darkMode: Boolean? = false
    var notificationsEnabled: Boolean? = false
    var temperatureUnit: TemperatureUnit? = null
    var autoDiscovery: Boolean? = false
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          darkMode = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("darkMode",
              "dark_mode", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          notificationsEnabled = booleanAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("notificationsEnabled", "notifications_enabled", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          temperatureUnit = temperatureUnitAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("temperatureUnit", "temperature_unit", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          autoDiscovery = booleanAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("autoDiscovery", "auto_discovery", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffff0.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  UserPreferences(
          darkMode = darkMode as Boolean,
          notificationsEnabled = notificationsEnabled as Boolean,
          temperatureUnit = temperatureUnit as TemperatureUnit,
          autoDiscovery = autoDiscovery as Boolean
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<UserPreferences> = this.constructorRef ?:
          UserPreferences::class.java.getDeclaredConstructor(Boolean::class.javaPrimitiveType,
          Boolean::class.javaPrimitiveType, TemperatureUnit::class.java,
          Boolean::class.javaPrimitiveType, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          darkMode,
          notificationsEnabled,
          temperatureUnit,
          autoDiscovery,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  override fun toJson(writer: JsonWriter, value_: UserPreferences?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("dark_mode")
    booleanAdapter.toJson(writer, value_.darkMode)
    writer.name("notifications_enabled")
    booleanAdapter.toJson(writer, value_.notificationsEnabled)
    writer.name("temperature_unit")
    temperatureUnitAdapter.toJson(writer, value_.temperatureUnit)
    writer.name("auto_discovery")
    booleanAdapter.toJson(writer, value_.autoDiscovery)
    writer.endObject()
  }
}
