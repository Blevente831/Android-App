// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.smarthome.`data`.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Float
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.Map
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class DeviceJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Device>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "name", "category",
      "location", "isOn", "brightness", "properties")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "id")

  private val deviceCategoryAdapter: JsonAdapter<DeviceCategory> =
      moshi.adapter(DeviceCategory::class.java, emptySet(), "category")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "isOn")

  private val floatAdapter: JsonAdapter<Float> = moshi.adapter(Float::class.java, emptySet(),
      "brightness")

  private val nullableMapOfStringStringAdapter: JsonAdapter<Map<String, String>?> =
      moshi.adapter(Types.newParameterizedType(Map::class.java, String::class.java,
      String::class.java), emptySet(), "properties")

  @Volatile
  private var constructorRef: Constructor<Device>? = null

  override fun toString(): String = buildString(28) {
      append("GeneratedJsonAdapter(").append("Device").append(')') }

  override fun fromJson(reader: JsonReader): Device {
    var id: String? = null
    var name: String? = null
    var category: DeviceCategory? = null
    var location: String? = null
    var isOn: Boolean? = false
    var brightness: Float? = 0f
    var properties: Map<String, String>? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        2 -> category = deviceCategoryAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("category", "category", reader)
        3 -> location = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("location",
            "location", reader)
        4 -> {
          isOn = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("isOn", "isOn",
              reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          brightness = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("brightness",
              "brightness", reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          properties = nullableMapOfStringStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xffffff8f.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  Device(
          id = id ?: throw Util.missingProperty("id", "id", reader),
          name = name ?: throw Util.missingProperty("name", "name", reader),
          category = category ?: throw Util.missingProperty("category", "category", reader),
          location = location ?: throw Util.missingProperty("location", "location", reader),
          isOn = isOn as Boolean,
          brightness = brightness as Float,
          properties = properties
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<Device> = this.constructorRef ?:
          Device::class.java.getDeclaredConstructor(String::class.java, String::class.java,
          DeviceCategory::class.java, String::class.java, Boolean::class.javaPrimitiveType,
          Float::class.javaPrimitiveType, Map::class.java, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          id ?: throw Util.missingProperty("id", "id", reader),
          name ?: throw Util.missingProperty("name", "name", reader),
          category ?: throw Util.missingProperty("category", "category", reader),
          location ?: throw Util.missingProperty("location", "location", reader),
          isOn,
          brightness,
          properties,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  override fun toJson(writer: JsonWriter, value_: Device?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    stringAdapter.toJson(writer, value_.id)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("category")
    deviceCategoryAdapter.toJson(writer, value_.category)
    writer.name("location")
    stringAdapter.toJson(writer, value_.location)
    writer.name("isOn")
    booleanAdapter.toJson(writer, value_.isOn)
    writer.name("brightness")
    floatAdapter.toJson(writer, value_.brightness)
    writer.name("properties")
    nullableMapOfStringStringAdapter.toJson(writer, value_.properties)
    writer.endObject()
  }
}
