// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.smarthome.`data`.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Float
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class DeviceInsightsJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<DeviceInsights>() {
  private val options: JsonReader.Options = JsonReader.Options.of("available", "deviceId",
      "message", "insights", "analysisTimestamp", "error", "suggestedAutomations",
      "confidenceScore")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "available")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "deviceId")

  private val nullableInsightDataAdapter: JsonAdapter<InsightData?> =
      moshi.adapter(InsightData::class.java, emptySet(), "insights")

  private val nullableListOfStringAdapter: JsonAdapter<List<String>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, String::class.java), emptySet(),
      "suggestedAutomations")

  private val nullableFloatAdapter: JsonAdapter<Float?> = moshi.adapter(Float::class.javaObjectType,
      emptySet(), "confidenceScore")

  @Volatile
  private var constructorRef: Constructor<DeviceInsights>? = null

  override fun toString(): String = buildString(36) {
      append("GeneratedJsonAdapter(").append("DeviceInsights").append(')') }

  override fun fromJson(reader: JsonReader): DeviceInsights {
    var available: Boolean? = null
    var deviceId: String? = null
    var message: String? = null
    var insights: InsightData? = null
    var analysisTimestamp: String? = null
    var error: String? = null
    var suggestedAutomations: List<String>? = null
    var confidenceScore: Float? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> available = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("available",
            "available", reader)
        1 -> {
          deviceId = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          message = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          insights = nullableInsightDataAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          analysisTimestamp = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          error = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          suggestedAutomations = nullableListOfStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          confidenceScore = nullableFloatAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xffffff01.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  DeviceInsights(
          available = available ?: throw Util.missingProperty("available", "available", reader),
          deviceId = deviceId,
          message = message,
          insights = insights,
          analysisTimestamp = analysisTimestamp,
          error = error,
          suggestedAutomations = suggestedAutomations,
          confidenceScore = confidenceScore
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<DeviceInsights> = this.constructorRef ?:
          DeviceInsights::class.java.getDeclaredConstructor(Boolean::class.javaPrimitiveType,
          String::class.java, String::class.java, InsightData::class.java, String::class.java,
          String::class.java, List::class.java, Float::class.javaObjectType,
          Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          available ?: throw Util.missingProperty("available", "available", reader),
          deviceId,
          message,
          insights,
          analysisTimestamp,
          error,
          suggestedAutomations,
          confidenceScore,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  override fun toJson(writer: JsonWriter, value_: DeviceInsights?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("available")
    booleanAdapter.toJson(writer, value_.available)
    writer.name("deviceId")
    nullableStringAdapter.toJson(writer, value_.deviceId)
    writer.name("message")
    nullableStringAdapter.toJson(writer, value_.message)
    writer.name("insights")
    nullableInsightDataAdapter.toJson(writer, value_.insights)
    writer.name("analysisTimestamp")
    nullableStringAdapter.toJson(writer, value_.analysisTimestamp)
    writer.name("error")
    nullableStringAdapter.toJson(writer, value_.error)
    writer.name("suggestedAutomations")
    nullableListOfStringAdapter.toJson(writer, value_.suggestedAutomations)
    writer.name("confidenceScore")
    nullableFloatAdapter.toJson(writer, value_.confidenceScore)
    writer.endObject()
  }
}
